/*
 * This source file was generated by the Gradle 'init' task
 */
package com.rnimour.sorters.mergesort

import java.io.File

// give absolute path so it can run both in IDE and in terminal with `gradle run`
private const val ABS_PATH = "/Users/ruudnimour/dev/projects/me/coroutines/sorters"
const val FILENAME = "$ABS_PATH/random_ints_64mil.txt"

// 1   million takes ~0.06s to read, ~0.15s to sort
// 4   million takes ~0.25s to read, ~0.6 s to sort
// 16  million takes ~1   s to read, ~1.8 s to sort
// 64  million takes ~4   s to read, ~7.5 s to sort

fun main() {
    println("Hello World! I am a single-threaded merge sorter. Sorting list ${FILENAME.split("/").last()}")

    val list = mutableListOf<Int>()
    time("Reading file") {
        File(FILENAME).forEachLine {
            list.add(it.toIntOrNull() ?: -1)
        }
    }

    time("Sorting") {
        mergeSort(list)
    }

    list.sanityCheckIsSorted()
}

// The merge algorithms. GitHub Copilot literally wrote all of this for me, it took away the fun part :(
fun mergeSort(list: MutableList<Int>) {
    if (list.size <= 1) {
        return
    }

    val middle = list.size / 2
    val left = list.subList(0, middle)
    val right = list.subList(middle, list.size)

    mergeSort(left)
    mergeSort(right)

    merge(list, left, right)
}

fun merge(list: MutableList<Int>, left: MutableList<Int>, right: MutableList<Int>) {

    var leftIndex = 0
    var rightIndex = 0
    var listIndex = 0

    while (leftIndex < left.size && rightIndex < right.size) {
        if (left[leftIndex] < right[rightIndex]) {
            list[listIndex++] = left[leftIndex++]
        } else {
            list[listIndex++] = right[rightIndex++]
        }
    }

    while (leftIndex < left.size) {
        list[listIndex++] = left[leftIndex++]
    }

    while (rightIndex < right.size) {
        list[listIndex++] = right[rightIndex++]
    }
}
