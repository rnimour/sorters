/*
 * This source file was generated by the Gradle 'init' task
 */
package com.rnimour.sorters.mergesort

import java.io.File

private const val ABS_PATH = "/Users/ruudnimour/dev/projects/me/coroutines/sorters"
private const val FILENAME = "$ABS_PATH/random_list_1mil.txt"

class MergeSort {
    val greeting: String
        get() {
            println(File(FILENAME).absolutePath)
            return "Hello World! I am a merge sorter. Sorting list $FILENAME"
        }
}

// helper
fun time(message: String = "time taken", action: () -> Any): Any {
    val start = System.currentTimeMillis()
    val result = action()
    val end = System.currentTimeMillis()
    println("$message: ${end - start} ms")
    return result
}

fun main() {
    println(MergeSort().greeting)

    val list = mutableListOf<Int>()
    time("Reading file") {
        File(FILENAME).forEachLine {
            list.add(it.toIntOrNull() ?: -1)
        }
    }

    time("Sorting") {
        mergeSort(list)
    }

    // sanity check
    println("List is ${isSorted(list) ?: "not "}sorted")

}

fun isSorted(list: List<Int>): Boolean? {
    for (i in 0..<list.size - 1) {
        if (list[i] > list[i + 1]) {
            return null
        }
    }
    return true
}

// The merge algorithms. GitHub Copilot literally wrote all of this for me, it took away the fun part :(
fun mergeSort(list: MutableList<Int>): Any {
    if (list.size <= 1) {
        return list
    }

    val middle = list.size / 2
    var left = list.subList(0, middle)
    var right = list.subList(middle, list.size)

    mergeSort(left)
    mergeSort(right)

    merge(list, left, right)

    return list
}

fun merge(list: MutableList<Int>, left: MutableList<Int>, right: MutableList<Int>) {

    var leftIndex = 0
    var rightIndex = 0
    var listIndex = 0

    while (leftIndex < left.size && rightIndex < right.size) {
        if (left[leftIndex] < right[rightIndex]) {
            list[listIndex++] = left[leftIndex++]
        } else {
            list[listIndex++] = right[rightIndex++]
        }
    }

    while (leftIndex < left.size) {
        list[listIndex++] = left[leftIndex++]
    }

    while (rightIndex < right.size) {
        list[listIndex++] = right[rightIndex++]
    }
}
